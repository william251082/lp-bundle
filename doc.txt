williamdelrosario@Williams-Mac-mini LoremIpsumBundle % composer init


  Welcome to the Composer config generator



This command will guide you through creating your composer.json config.

Package name (<vendor>/<name>) [williamdelrosario/lorem-ipsum-bundle]: pristine/lorem-ipsum-bundle
Description []: Hi Lorem Ipsum
Author [William del Rosario <pristine.web.dev@gmail.com>, n to skip]:
Minimum Stability []:
Package Type (e.g. library, project, metapackage, composer-plugin) []: symfony-bundle
License []:

Define your dependencies.

Would you like to define your dependencies (require) interactively [yes]?
Search for a package:
Would you like to define your dev dependencies (require-dev) interactively [yes]?
Search for a package:

{
    "name": "pristine/lorem-ipsum-bundle",
    "description": "Hi Lorem Ipsum",
    "type": "symfony-bundle",
    "authors": [
        {
            "name": "William del Rosario",
            "email": "pristine.web.dev@gmail.com"
        }
    ],
    "require": {}
}

Do you confirm generation [yes]? yes

composer require symfony/phpunit-bridge --dev
./vendor/bin/simple-phpunit

You might think that settling for mediocrity was a good idea just because it's safe.
Don't do it, take the chance, take the risk, find your passion, rekindle it,
fall in love all over again... it's worth it.

Pressure is a privilege.

composer update


First, you can test the Configuration class itself.
 That's a nice idea if you have some really complex rules.
 Second, you can test the extension class directly.
 In this case, you would pass different config arrays to the load()
 method and assert that the arguments on the service Definition objects are set correctly.
 It's a really low-level test, but it works.

And third, you can test your configuration with an integration test like we created,
where you boot a real application with some config, and check the behavior of the final services.

 To create a custom word provider, you need the class, like CustomWordProvider,
  you need to register it as a service - which is automatic in our app -
  and then you need to pass the service id to the word_provider option.


./vendor/bin/simple-phpunit --filter testServiceWiringWithConfiguration
rm -rf tests/cache


Publishing to Packagist